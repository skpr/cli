package cache

import (
	"context"
	"fmt"

	"github.com/aws/aws-sdk-go-v2/aws"
	awsconfig "github.com/aws/aws-sdk-go-v2/config"
	"github.com/aws/aws-sdk-go-v2/service/cognitoidentity"
	"github.com/pkg/errors"

	skprcredentials "github.com/skpr/cli/internal/aws/credentials"
	credentialscache "github.com/skpr/cli/internal/client/config/credentials/cache"
)

// Name of the provider.
const Name = "SkprCacheProvider"

// Provider for getting cached credentials.
// Typically generated by "skpr login".
type Provider struct {
	aws.CredentialsProvider
	clusterKey string
}

// New provider returns new Skpr cache credentials.
func New(clusterKey string) aws.CredentialsProvider {
	return &Provider{
		clusterKey: clusterKey,
	}
}

// Retrieve retrieves the keys from the cache.
func (e *Provider) Retrieve(ctx context.Context) (aws.Credentials, error) {
	credentials, err := credentialscache.Get(e.clusterKey)
	if err != nil {
		return aws.Credentials{}, fmt.Errorf("failed to get cached credentials: %w", err)
	}

	// If our credentials have not expired, return them.
	if !credentials.TemporaryCredentialsExpired() {
		return credentials.Temporary, nil
	}

	newToken, err := credentials.GetToken(ctx)
	if err != nil {
		return aws.Credentials{}, fmt.Errorf("failed to get token: %w", err)
	}

	credentials.Token = credentialscache.Token{
		Refresh: newToken.RefreshToken,
	}

	// Extract the ID Token from OAuth2 token.
	idToken, ok := newToken.Extra("id_token").(string)
	if !ok {
		return aws.Credentials{}, errors.Wrap(err, "Missing id_token")
	}

	cfg, err := awsconfig.LoadDefaultConfig(ctx, awsconfig.WithRegion(credentials.Cognito.Region), awsconfig.WithCredentialsProvider(aws.AnonymousCredentials{}))
	if err != nil {
		return aws.Credentials{}, fmt.Errorf("failed to load AWS config: %w", err)
	}

	newTemporary, err := skprcredentials.GetTempCredentials(ctx, cognitoidentity.NewFromConfig(cfg), skprcredentials.GetTempCredentialsParams{
		Token:            idToken,
		IdentityPool:     credentials.Cognito.IdentityPoolID,
		IdentityProvider: credentials.Cognito.IdentityProviderID,
	})
	if err != nil {
		return aws.Credentials{}, fmt.Errorf("failed to get temporary credentials: %w", err)
	}

	// Set our name so that we can identify the source of the credentials.
	newTemporary.Source = Name

	credentials.Temporary = newTemporary

	// Save back the refreshed token and credentials.
	err = credentialscache.Set(e.clusterKey, credentials)
	if err != nil {
		return aws.Credentials{}, fmt.Errorf("failed to store refreshed credentials: %w", err)
	}

	return credentials.Temporary, nil
}
